name: 'Release pipeline'
trigger:
  batch: true
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: SonatypeCredentials
  - group: GPGKey
  - name: MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
  - task: DownloadSecureFile@1
    displayName: 'Get GPG public key'
    name: pubring
    inputs:
      secureFile: pubring.asc

  - task: DownloadSecureFile@1
    displayName: 'Get GPG private key'
    name: secring
    inputs:
      secureFile: secring.asc

  - task: Bash@3
    displayName: 'Prepare GPG key to sign artifacts'
    inputs:
      targetType: 'inline'
      script: |
        echo $(tty)
        ls -la $(pubring.secureFilePath)
        ls -la $(secring.secureFilePath)
        mkdir ~/.gnupg
        chmod -R 700 ~/.gnupg
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        gpg --import $(pubring.secureFilePath)
        gpg --batch --import $(secring.secureFilePath)
    env:
      # Needed for GPG to work on headless Azure agents
      GPG_TTY: /dev/pts/0

  - task: Cache@2
    displayName: 'Cache Maven repository'
    inputs:
      key: 'mvn | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        mvn | "$(Agent.OS)"
        mvn
      path: $(MAVEN_CACHE_FOLDER)

  - task: Maven@3
    displayName: 'Maven package and publish'
    inputs:
      mavenPomFile: 'pom.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      goals: 'deploy'
      mavenOptions: '$(MAVEN_OPTS)'
      options: '-s $(System.DefaultWorkingDirectory)/release-settings.xml -Prelease -Dgpg.passphrase=$(GPG_PASSPHRASE)'
    env:
      # Secrets must be extracted explicitly
      OSSRH_USERNAME: $(OSSRH_USERNAME)
      OSSRH_PASSWORD: $(OSSRH_PASSWORD)
      GPG_PASSPHRASE: $(GPG_PASSPHRASE)

  - task: Bash@3
    displayName: 'Clean environment'
    inputs:
      targetType: 'inline'
      script: |
        rm -rf $(pubring.secureFilePath)
        rm -rf $(secring.secureFilePath)
        rm -rf ~/.gnupg

  - task: Maven@3
    displayName: 'Retrieve artifact version'
    inputs:
      effectivePomSkip: true
      mavenPomFile: 'pom.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      goals: 'help:evaluate'
      mavenOptions: '$(MAVEN_OPTS)'
      options: '--log-file $(Pipeline.Workspace)/version.txt -Dexpression=project.version -q -DforceStdout'

  - task: Bash@3
    displayName: 'Store artifact version into a variable'
    inputs:
      targetType: 'inline'
      workingDirectory: $(Pipeline.Workspace)
      script: |
        artifactVersion=$(cat version.txt)
        echo "##vso[task.setvariable variable=artifactVersion]${artifactVersion}"
        echo Built version: ${artifactVersion}
        rm ./version.txt

  - task: Maven@3
    displayName: 'Maven build bundle'
    inputs:
      mavenPomFile: 'pom.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      goals: 'clean package'
      mavenOptions: '$(MAVEN_OPTS)'
      options: '-Pbundle'

  - task: GitHubRelease@0
    displayName: 'Create GitHub release'
    inputs:
      gitHubConnection: 'maximevw'
      repositoryName: $(Build.Repository.Name)
      action: create
      target: $(Build.SourceVersion)
      tagSource: manual
      tag: 'v$(artifactVersion)'
      assets: $(Build.SourcesDirectory)/target/*-bundle.jar
      isDraft: true
